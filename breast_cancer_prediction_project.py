# -*- coding: utf-8 -*-
"""Breast Cancer Prediction Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AOn4WvLv1MncWW_h_t8Ou2h8WFRKufR7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv("breastCancer.csv")

data.head()

data.shape

data["class"].value_counts()

data.dtypes

data["bare_nucleoli"]

data[data["bare_nucleoli"]=="?"]

data[data["bare_nucleoli"]=="?"].sum()

df=data.replace('?',np.nan)

df.median()

df=df.fillna(df.median())

df.dtypes

df["bare_nucleoli"]=df["bare_nucleoli"].astype('int64')

df.dtypes

df.head()

df.drop('id',axis=1,inplace=True)

df.head()

df.describe().T

sns.distplot(df["class"])

df.hist(bins=20,figsize=(30,30),layout=(6,3));

plt.figure(figsize=(15,10))
sns.boxplot(data=df,orient="h")

df.corr()

plt.figure(figsize=(35,15))
sns.heatmap(df.corr(),vmax=1,square=True,annot=True,cmap='viridis')
plt.title("Correlation heatmap of different attributes")
plt.show()

sns.pairplot(df,diag_kind="kde")

df.head()

X=df.drop("class",axis=1)
y=df["class"]

X

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=1)

from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5,weights="distance")
classifier.fit(X_train,y_train)

predicted_KNN=classifier.predict(X_test)

predicted_KNN

result_KNN={
    'y_test':y_test,
    'predected':predicted_KNN
}

data_result_KNN=pd.DataFrame(result_KNN)

data_result_KNN

from sklearn.metrics import confusion_matrix,accuracy_score
print(confusion_matrix(y_test,predicted_KNN),accuracy_score(y_test,predicted_KNN)*100)

from sklearn.svm import SVC
classifier=SVC(gamma=0.025,C=3)
classifier.fit(X_train,y_train)

predected_SVM=classifier.predict(X_test)

predected_SVM

from sklearn.metrics import confusion_matrix,accuracy_score
print(confusion_matrix(y_test,predected_SVM),accuracy_score(y_test,predected_SVM)*100)

knnPrediction=pd.DataFrame(predicted_KNN)
svmPrediction=pd.DataFrame(predected_SVM)
df1=pd.concat([knnPrediction,svmPrediction],axis=1)

df1

df1.columns=["knnPrediction","svmPrediction"]

from sklearn.metrics import classification_report
print(classification_report(y_test,predicted_KNN))
#KNN CLASSIFICATION REPROT

from sklearn.metrics import classification_report
print(classification_report(y_test,predected_SVM))